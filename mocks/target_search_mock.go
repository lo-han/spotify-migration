// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"spotify_migration/entities/data"

	mock "github.com/stretchr/testify/mock"
)

// NewITargetSearch creates a new instance of ITargetSearch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITargetSearch(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITargetSearch {
	mock := &ITargetSearch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ITargetSearch is an autogenerated mock type for the ITargetSearch type
type ITargetSearch struct {
	mock.Mock
}

type ITargetSearch_Expecter struct {
	mock *mock.Mock
}

func (_m *ITargetSearch) EXPECT() *ITargetSearch_Expecter {
	return &ITargetSearch_Expecter{mock: &_m.Mock}
}

// SearchItem provides a mock function for the type ITargetSearch
func (_mock *ITargetSearch) SearchItem(ctx context.Context, music *data.Music) (string, error) {
	ret := _mock.Called(ctx, music)

	if len(ret) == 0 {
		panic("no return value specified for SearchItem")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *data.Music) (string, error)); ok {
		return returnFunc(ctx, music)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *data.Music) string); ok {
		r0 = returnFunc(ctx, music)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *data.Music) error); ok {
		r1 = returnFunc(ctx, music)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ITargetSearch_SearchItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchItem'
type ITargetSearch_SearchItem_Call struct {
	*mock.Call
}

// SearchItem is a helper method to define mock.On call
//   - ctx context.Context
//   - music *data.Music
func (_e *ITargetSearch_Expecter) SearchItem(ctx interface{}, music interface{}) *ITargetSearch_SearchItem_Call {
	return &ITargetSearch_SearchItem_Call{Call: _e.mock.On("SearchItem", ctx, music)}
}

func (_c *ITargetSearch_SearchItem_Call) Run(run func(ctx context.Context, music *data.Music)) *ITargetSearch_SearchItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *data.Music
		if args[1] != nil {
			arg1 = args[1].(*data.Music)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ITargetSearch_SearchItem_Call) Return(itemID string, err error) *ITargetSearch_SearchItem_Call {
	_c.Call.Return(itemID, err)
	return _c
}

func (_c *ITargetSearch_SearchItem_Call) RunAndReturn(run func(ctx context.Context, music *data.Music) (string, error)) *ITargetSearch_SearchItem_Call {
	_c.Call.Return(run)
	return _c
}
