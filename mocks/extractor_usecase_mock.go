// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"spotify_migration/entities/data"

	mock "github.com/stretchr/testify/mock"
)

// NewIExtractorUsecase creates a new instance of IExtractorUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExtractorUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExtractorUsecase {
	mock := &IExtractorUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IExtractorUsecase is an autogenerated mock type for the IExtractorUsecase type
type IExtractorUsecase struct {
	mock.Mock
}

type IExtractorUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *IExtractorUsecase) EXPECT() *IExtractorUsecase_Expecter {
	return &IExtractorUsecase_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type IExtractorUsecase
func (_mock *IExtractorUsecase) Extract(ctx context.Context, resourceName string) (*data.Collection, error) {
	ret := _mock.Called(ctx, resourceName)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 *data.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*data.Collection, error)); ok {
		return returnFunc(ctx, resourceName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *data.Collection); ok {
		r0 = returnFunc(ctx, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, resourceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IExtractorUsecase_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type IExtractorUsecase_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
func (_e *IExtractorUsecase_Expecter) Extract(ctx interface{}, resourceName interface{}) *IExtractorUsecase_Extract_Call {
	return &IExtractorUsecase_Extract_Call{Call: _e.mock.On("Extract", ctx, resourceName)}
}

func (_c *IExtractorUsecase_Extract_Call) Run(run func(ctx context.Context, resourceName string)) *IExtractorUsecase_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IExtractorUsecase_Extract_Call) Return(collection *data.Collection, err error) *IExtractorUsecase_Extract_Call {
	_c.Call.Return(collection, err)
	return _c
}

func (_c *IExtractorUsecase_Extract_Call) RunAndReturn(run func(ctx context.Context, resourceName string) (*data.Collection, error)) *IExtractorUsecase_Extract_Call {
	_c.Call.Return(run)
	return _c
}
