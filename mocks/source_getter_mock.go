// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"spotify_migration/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewISourceGetter creates a new instance of ISourceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISourceGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISourceGetter {
	mock := &ISourceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ISourceGetter is an autogenerated mock type for the ISourceGetter type
type ISourceGetter struct {
	mock.Mock
}

type ISourceGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ISourceGetter) EXPECT() *ISourceGetter_Expecter {
	return &ISourceGetter_Expecter{mock: &_m.Mock}
}

// GetPlaylistID provides a mock function for the type ISourceGetter
func (_mock *ISourceGetter) GetPlaylistID(ctx context.Context, resourceName string) (string, error) {
	ret := _mock.Called(ctx, resourceName)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaylistID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, resourceName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, resourceName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, resourceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ISourceGetter_GetPlaylistID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaylistID'
type ISourceGetter_GetPlaylistID_Call struct {
	*mock.Call
}

// GetPlaylistID is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
func (_e *ISourceGetter_Expecter) GetPlaylistID(ctx interface{}, resourceName interface{}) *ISourceGetter_GetPlaylistID_Call {
	return &ISourceGetter_GetPlaylistID_Call{Call: _e.mock.On("GetPlaylistID", ctx, resourceName)}
}

func (_c *ISourceGetter_GetPlaylistID_Call) Run(run func(ctx context.Context, resourceName string)) *ISourceGetter_GetPlaylistID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ISourceGetter_GetPlaylistID_Call) Return(s string, err error) *ISourceGetter_GetPlaylistID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *ISourceGetter_GetPlaylistID_Call) RunAndReturn(run func(ctx context.Context, resourceName string) (string, error)) *ISourceGetter_GetPlaylistID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaylistItems provides a mock function for the type ISourceGetter
func (_mock *ISourceGetter) GetPlaylistItems(ctx context.Context, resourceName string, id string) (*domain.Collection, error) {
	ret := _mock.Called(ctx, resourceName, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaylistItems")
	}

	var r0 *domain.Collection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Collection, error)); ok {
		return returnFunc(ctx, resourceName, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Collection); ok {
		r0 = returnFunc(ctx, resourceName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Collection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, resourceName, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ISourceGetter_GetPlaylistItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaylistItems'
type ISourceGetter_GetPlaylistItems_Call struct {
	*mock.Call
}

// GetPlaylistItems is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - id string
func (_e *ISourceGetter_Expecter) GetPlaylistItems(ctx interface{}, resourceName interface{}, id interface{}) *ISourceGetter_GetPlaylistItems_Call {
	return &ISourceGetter_GetPlaylistItems_Call{Call: _e.mock.On("GetPlaylistItems", ctx, resourceName, id)}
}

func (_c *ISourceGetter_GetPlaylistItems_Call) Run(run func(ctx context.Context, resourceName string, id string)) *ISourceGetter_GetPlaylistItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ISourceGetter_GetPlaylistItems_Call) Return(collection *domain.Collection, err error) *ISourceGetter_GetPlaylistItems_Call {
	_c.Call.Return(collection, err)
	return _c
}

func (_c *ISourceGetter_GetPlaylistItems_Call) RunAndReturn(run func(ctx context.Context, resourceName string, id string) (*domain.Collection, error)) *ISourceGetter_GetPlaylistItems_Call {
	_c.Call.Return(run)
	return _c
}
