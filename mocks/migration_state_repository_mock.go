// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"spotify_migration/entities/data"

	mock "github.com/stretchr/testify/mock"
)

// NewIMigrationStateRepository creates a new instance of IMigrationStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMigrationStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMigrationStateRepository {
	mock := &IMigrationStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IMigrationStateRepository is an autogenerated mock type for the IMigrationStateRepository type
type IMigrationStateRepository struct {
	mock.Mock
}

type IMigrationStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IMigrationStateRepository) EXPECT() *IMigrationStateRepository_Expecter {
	return &IMigrationStateRepository_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) AddItem(item *data.Music, address string) {
	_mock.Called(item, address)
	return
}

// IMigrationStateRepository_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type IMigrationStateRepository_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - item *data.Music
//   - address string
func (_e *IMigrationStateRepository_Expecter) AddItem(item interface{}, address interface{}) *IMigrationStateRepository_AddItem_Call {
	return &IMigrationStateRepository_AddItem_Call{Call: _e.mock.On("AddItem", item, address)}
}

func (_c *IMigrationStateRepository_AddItem_Call) Run(run func(item *data.Music, address string)) *IMigrationStateRepository_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *data.Music
		if args[0] != nil {
			arg0 = args[0].(*data.Music)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IMigrationStateRepository_AddItem_Call) Return() *IMigrationStateRepository_AddItem_Call {
	_c.Call.Return()
	return _c
}

func (_c *IMigrationStateRepository_AddItem_Call) RunAndReturn(run func(item *data.Music, address string)) *IMigrationStateRepository_AddItem_Call {
	_c.Run(run)
	return _c
}

// GetMigratedItems provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) GetMigratedItems() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMigratedItems")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// IMigrationStateRepository_GetMigratedItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigratedItems'
type IMigrationStateRepository_GetMigratedItems_Call struct {
	*mock.Call
}

// GetMigratedItems is a helper method to define mock.On call
func (_e *IMigrationStateRepository_Expecter) GetMigratedItems() *IMigrationStateRepository_GetMigratedItems_Call {
	return &IMigrationStateRepository_GetMigratedItems_Call{Call: _e.mock.On("GetMigratedItems")}
}

func (_c *IMigrationStateRepository_GetMigratedItems_Call) Run(run func()) *IMigrationStateRepository_GetMigratedItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IMigrationStateRepository_GetMigratedItems_Call) Return(stringToString map[string]string) *IMigrationStateRepository_GetMigratedItems_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *IMigrationStateRepository_GetMigratedItems_Call) RunAndReturn(run func() map[string]string) *IMigrationStateRepository_GetMigratedItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingItems provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) GetPendingItems() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPendingItems")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// IMigrationStateRepository_GetPendingItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingItems'
type IMigrationStateRepository_GetPendingItems_Call struct {
	*mock.Call
}

// GetPendingItems is a helper method to define mock.On call
func (_e *IMigrationStateRepository_Expecter) GetPendingItems() *IMigrationStateRepository_GetPendingItems_Call {
	return &IMigrationStateRepository_GetPendingItems_Call{Call: _e.mock.On("GetPendingItems")}
}

func (_c *IMigrationStateRepository_GetPendingItems_Call) Run(run func()) *IMigrationStateRepository_GetPendingItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IMigrationStateRepository_GetPendingItems_Call) Return(stringToString map[string]string) *IMigrationStateRepository_GetPendingItems_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *IMigrationStateRepository_GetPendingItems_Call) RunAndReturn(run func() map[string]string) *IMigrationStateRepository_GetPendingItems_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) Read() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMigrationStateRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IMigrationStateRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *IMigrationStateRepository_Expecter) Read() *IMigrationStateRepository_Read_Call {
	return &IMigrationStateRepository_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *IMigrationStateRepository_Read_Call) Run(run func()) *IMigrationStateRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IMigrationStateRepository_Read_Call) Return(b bool, err error) *IMigrationStateRepository_Read_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *IMigrationStateRepository_Read_Call) RunAndReturn(run func() (bool, error)) *IMigrationStateRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) Save() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IMigrationStateRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type IMigrationStateRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *IMigrationStateRepository_Expecter) Save() *IMigrationStateRepository_Save_Call {
	return &IMigrationStateRepository_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *IMigrationStateRepository_Save_Call) Run(run func()) *IMigrationStateRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IMigrationStateRepository_Save_Call) Return(err error) *IMigrationStateRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IMigrationStateRepository_Save_Call) RunAndReturn(run func() error) *IMigrationStateRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemToMigrated provides a mock function for the type IMigrationStateRepository
func (_mock *IMigrationStateRepository) UpdateItemToMigrated(itemID string) {
	_mock.Called(itemID)
	return
}

// IMigrationStateRepository_UpdateItemToMigrated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemToMigrated'
type IMigrationStateRepository_UpdateItemToMigrated_Call struct {
	*mock.Call
}

// UpdateItemToMigrated is a helper method to define mock.On call
//   - itemID string
func (_e *IMigrationStateRepository_Expecter) UpdateItemToMigrated(itemID interface{}) *IMigrationStateRepository_UpdateItemToMigrated_Call {
	return &IMigrationStateRepository_UpdateItemToMigrated_Call{Call: _e.mock.On("UpdateItemToMigrated", itemID)}
}

func (_c *IMigrationStateRepository_UpdateItemToMigrated_Call) Run(run func(itemID string)) *IMigrationStateRepository_UpdateItemToMigrated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IMigrationStateRepository_UpdateItemToMigrated_Call) Return() *IMigrationStateRepository_UpdateItemToMigrated_Call {
	_c.Call.Return()
	return _c
}

func (_c *IMigrationStateRepository_UpdateItemToMigrated_Call) RunAndReturn(run func(itemID string)) *IMigrationStateRepository_UpdateItemToMigrated_Call {
	_c.Run(run)
	return _c
}
