// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"spotify_migration/entities/data"

	mock "github.com/stretchr/testify/mock"
)

// NewIImporterUsecase creates a new instance of IImporterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIImporterUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IImporterUsecase {
	mock := &IImporterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IImporterUsecase is an autogenerated mock type for the IImporterUsecase type
type IImporterUsecase struct {
	mock.Mock
}

type IImporterUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *IImporterUsecase) EXPECT() *IImporterUsecase_Expecter {
	return &IImporterUsecase_Expecter{mock: &_m.Mock}
}

// Import provides a mock function for the type IImporterUsecase
func (_mock *IImporterUsecase) Import(ctx context.Context, collection *data.Collection) (bool, error) {
	ret := _mock.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *data.Collection) (bool, error)); ok {
		return returnFunc(ctx, collection)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *data.Collection) bool); ok {
		r0 = returnFunc(ctx, collection)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *data.Collection) error); ok {
		r1 = returnFunc(ctx, collection)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IImporterUsecase_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type IImporterUsecase_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
//   - collection *data.Collection
func (_e *IImporterUsecase_Expecter) Import(ctx interface{}, collection interface{}) *IImporterUsecase_Import_Call {
	return &IImporterUsecase_Import_Call{Call: _e.mock.On("Import", ctx, collection)}
}

func (_c *IImporterUsecase_Import_Call) Run(run func(ctx context.Context, collection *data.Collection)) *IImporterUsecase_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *data.Collection
		if args[1] != nil {
			arg1 = args[1].(*data.Collection)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IImporterUsecase_Import_Call) Return(b bool, err error) *IImporterUsecase_Import_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *IImporterUsecase_Import_Call) RunAndReturn(run func(ctx context.Context, collection *data.Collection) (bool, error)) *IImporterUsecase_Import_Call {
	_c.Call.Return(run)
	return _c
}
